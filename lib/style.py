'''
style.py
Authors: Jason M. Carter, Mike Huettel
Date: December 2023
Version: 1.0

Licensed under the Apache License, Version 2.0 (the "License")
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Contributors:
    Oak Ridge National Laboratory

Description:  Instances represent a single Cytoscape graph style. These instances will be designed to better 
    visualize the data from the graphs generated by the static analysis tool.
'''

import json



class Style():
    """Instances represent a single Cytoscape graph style. These instances will be designed to better 
    visualize the data from the graphs generated by the static analysis tool. The key features we want
    to differentiate are:
    - Parent - Child relationships (edges are directed from parent to child)
    - Types of dependencies could be visualized by different edge line styles, e.g., wants versus requires
    - Vertices (units) could be visualized by different vertex shapes or colors.
    - We also need to format the text within each node, etc.

    1. Make a style instance whose name is the style name to use in Cytoscape.
        - This style MAY ALREADY EXIST.
    2. We can force the system to be remade or customized.
    3. We can just activate the style we instantiated.
    4. If the style name doesn't exist we need to create it and send it to Cytoscape.



    """

    DEFAULT_PROP_OBJ_KEYS = [ 'visualProperty', 'value' ]
    MAPPING_PROP_OBJ_KEYS = [ 'mappingType', 'mappingColumn', 'mappingColumnType', 'visualProperty' ]

    @staticmethod
    def get_style( style_name, log = None ):
        """A little helper method to grab styles from cytoscape as a template for the one we'll
        build as a base style file.

        Args:
            style_name: the Cytoscape name for the style you would like to retrieve

        Returns:
            A json file with the style information retrieved from Cytoscape.
        """

        style_json = {}

        if style_name not in Style.get_available_styles( log ):
            if log:
                log.warning("Cytoscape Style: %s is not available.", style_name )
        try:
            style_json = p4c.styles.get_visual_style_JSON( style_name )

        except:
            if log:
                log.warning("Cytoscape style: %s not found or problem with connection.", style_name )

        return style_json

    @staticmethod
    def write_style_file( style_name, filename, log=None ):

        style_json = Style.get_style( style_name )
        if style_json:
            json.dump( style_json, open( filename, 'w' ), indent=4 )
        elif log:
            log.warning("No style information was retieved for style: {}".format( style_name ))

    @staticmethod
    def get_style_mappings_list( style_json ):
        """Create a usable mappings list by stripping out the comments, etc in our base graph style.

        NOTE: This looks like we are just re-creating the dictionary, but we are actually ensuring
        that the "documentation" fields are eliminated when sent to cytoscape; this way we can annotate
        the style json with fields that would not be understood by cytoscape.
        """

        mappings = []
        if style_json and 'mappings' in style_json:

            # mappings maps to a list of objects.
            for mapping_properties_dict in style_json['mappings']:

                # build a new dictionary with only the data we want.
                new_mapping_properties_dict = { key : mapping_properties_dict[key] for key in Style.MAPPING_PROP_OBJ_KEYS }

                # points MAY NOT BE in all mapping styles; deal with that here.
                if new_mapping_properties_dict['mappingType'] == 'continuous' and 'points' in mapping_properties_dict:
                    new_mapping_properties_dict['points'] = mapping_properties_dict['points']

                mappings.append( new_mapping_properties_dict )

        return mappings

    @staticmethod
    def get_style_defaults_list( style_json ):
        """Create a usable defaults list by stripping out the comments, etc in our base graph style.
        """

        defaults = []
        if style_json and 'defaults' in style_json:
            for default_properties_dict in style_json['defaults']:
                new_default_properties_dict = { key : default_properties_dict[key] for key in Style.DEFAULT_PROP_OBJ_KEYS }
                defaults.append( new_default_properties_dict )
        return defaults

    @staticmethod
    def make_new_style_name( proposed_style_name = "systemd_graph_style" ):
        """Validate whether a proposed name will work, or generate a non-conflicting style name.
        """

        slist = Style.get_available_styles()

        i = 1
        new_style_name = proposed_style_name
        while ( new_style_name in slist ):
            new_style_name = "{}.{}".format( proposed_style_name, i )
            i += 1
        return new_style_name

    @staticmethod
    def get_available_styles(log = None):
        available_styles = []
        try:
            available_styles = p4c.styles.get_visual_style_names()
        except:
            if log:
                log.warning("There is a connection PROBLEM with Cytoscape; is it running.")
            else:
                print("There is a connection PROBLEM with Cytoscape; is it running?")

        return available_styles

    @staticmethod
    def read_style_file( style_file, log = None ):
        """Read a json style file from the specified file and return the json.

        Args:
            style_file: a Path instance that points to a file.

        Returns:
            a json object that contains the cytoscape style file.
        """

        style_json = {}
        try:
            with style_file.open() as json_file:
                style_json = json.load( json_file )
        except:
            if log:
                log.error("Failed to read from the style file: %s", style_file )
            else:
                print("Failed to read from the style file: %s", style_file )

        return style_json

    def __init__( self, name, log):
        """
        Args:
            name: the Cytoscape style name for the style you would like to apply to the graph.
            log : a logger.
        """

        self.log = log
        self.name = name

        self.init_style()


    def init_style(self):
        """Import py4cytoscape to alow cytoscape styling.  Importing these conditionally allows us to run systemd 
        snapshot and build a master struct on machines that don't have cytoscape installed without requiring each 
        of those machines to install additional software."""

        global p4c
        import py4cytoscape as p4c

        return


    def is_present( self, style_name ):
        """Set the available_styles instance variable after retrieving all the current styles in 
        cytoscape.
        Then, return True if style_name is in that list and False otherwise.
        """

        
        self.log.debug("Starting...")
        self.available_styles = Style.get_available_styles( self.log )
        self.log.debug("Finishing...")
        return style_name in self.available_styles

    def activate( self ):
        """Make this style the active style for the current graph in cytoscape.
        """

        if self.is_present( self.name ):
            self.log.info("Your selected style: {} is available to use in Cytoscape.".format( self.name ))
            # JMC: These commands do not seem to work; if placed after set visual style they will prevent
            #      the style from being applied.
            # p4c.match_arrow_color_to_edge( True )
            # p4c.lock_node_dimensions( False )
            p4c.styles.set_visual_style( self.name );
        else:
            self.log.warning("Style named: %s is not an available style.", self.name )

    def create( self, style_json ):
        if self.is_present( self.name ):
            self.name = Style.make_new_style_name()

        mappings = Style.get_style_mappings_list( style_json )
        defaults = Style.get_style_defaults_list( style_json )
        p4c.styles.create_visual_style( self.name, defaults=defaults, mappings=mappings )
        # JMC: These commands do not seem to work.
        # p4c.match_arrow_color_to_edge( True )
        # p4c.lock_node_dimensions( False )
        p4c.styles.set_visual_style( self.name )
        return self.name

